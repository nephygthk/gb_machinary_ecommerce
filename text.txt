class ProductInlineView():
   form_class = AddProductForm
   model = Product
   template_name = "store/product_create_or_update.html"
   title = ''

   def form_valid(self, form):
      named_formsets = self.get_named_formsets()
      if not all((x.is_valid() for x in named_formsets.values())):
         return self.render_to_response(self.get_context_data(form=form))
      self.object = form.save()

      # for every formset, attempt to find a specific formset save function
      # otherwise, just save.
      for name, formset in named_formsets.items():
         formset_save_func = getattr(self, 'formset_{0}_valid'.format(name), None)
         print(formset)
         if formset_save_func is not None:
            formset_save_func(formset)
         else:
            formset.save()
      messages.success(self.request, 'product was added successfully')
      return redirect('account:admin_dashboard')
   
   def formset_media_valid(self, formset):
      """
      Hook for custom formset saving. Useful if you have multiple formsets
      """
      medias = formset.save(commit=False)  # self.save_formset(formset, contact)
      # add this 2 lines, if you have can_delete=True parameter 
      # set in inlineformset_factory func
      for obj in formset.deleted_objects:
         obj.delete()
      for image in medias:
         image.product = self.object
         image.save()



class AddProductView(ProductInlineView, CreateView):

   def get_context_data(self, **kwargs):
      ctx = super(AddProductView, self).get_context_data(**kwargs)
      ctx['named_formsets'] = self.get_named_formsets()
      ctx['title'] = 'Add New Product'
      return ctx
   
   def get_named_formsets(self):
      if self.request.method == "GET":
         return {'medias': MediaFormSet(prefix='medias')}
      else:
         return {'medias': MediaFormSet(self.request.POST or None, self.request.FILES or None, prefix='medias')
         }
